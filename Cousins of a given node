class Solution
{
    public:
    vector<int> printCousins(Node* root, Node* node_to_find)
    {
        //code here
        queue<Node*> q;
        q.push(root);
        int to_remove=-1;
        while(!q.empty())
        {
            int n=q.size();
            vector<int> st;
            bool ok=false;
            for(int i=0;i<n;i++)
            {
                Node* k=q.front();
                st.push_back(k->data);
                if(k->right)
                if(k->right->data==node_to_find->data)
                {
                    if(k->left) to_remove=k->left->data;
                }
                
                if(k->left)
                if(k->left->data==node_to_find->data)
                {
                    if(k->right) to_remove=k->right->data;
                }
                
                if(k->data == node_to_find->data) ok=true;
                q.pop();
                if(k->left) q.push(k->left);
                if(k->right) q.push(k->right);
            }
            //for(auto &i:st) cout<<i<<" ";
            //cout<<'\n';
            if(ok)
            {
                if(find(st.begin(),st.end(),to_remove)!=st.end()) 
                    st.erase(find(st.begin(),st.end(),to_remove));
                st.erase(find(st.begin(),st.end(),node_to_find->data));
                if(st.size()==0) return {-1};
                return st;
            }
        }
        return {-1};
    }
    
};
