class Solution{
public:
void dfs(vector<int> v[],Node* root)
{
    if(!root) return ;
    dfs(v,root->left);
    if(root->left)
    {
        v[root->left->data].push_back(root->data);
        v[root->data].push_back(root->left->data);
    }
    if(root->right)
    {
        v[root->right->data].push_back(root->data);
        v[root->data].push_back(root->right->data);
    }
    dfs(v,root->right);
}
    int sum_at_distK(Node* root, int target, int k)
    {
        // code here
        vector<int> v[10001];
        vector<bool> vis(10001,false);
        dfs(v,root);
        if(v[target].size()==0) return 0;
        queue<int> q;
        q.push(target);
        vis[target]=true;
        int ans=target;
        int level=1;
        while(!q.empty())
        {
            int n=q.size();
            while(n--)
            {
                int x=q.front();
                q.pop();
                for(auto &i:v[x])
                {
                    if(!vis[i])
                    {
                        if(level<=k) ans += i;
                        q.push(i);
                        vis[i]=true;
                    }
                }
            }
            level++;
            if(level>k) break;
        }
        return ans;
    }
};
