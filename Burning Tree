class Solution {
  public:
  map<int,vector<int>> adj;
  map<int,int> depth;
  int ans=0;
  void dfs(int node)
  {
      for(auto &child:adj[node])
      {
          if(depth.find(child)==depth.end())
          {
              depth[child]=1+depth[node];
              ans=max(ans,depth[child]);
              dfs(child);
          }
      }
  }
  void makeGraph(Node* root,int par)
  {
      if(!root) return ;
      if(par!=-1)
      {
          adj[par].push_back(root->data);
          adj[root->data].push_back(par);
      }
      makeGraph(root->left,root->data);
      makeGraph(root->right,root->data);
  }
    int minTime(Node* root, int target) 
    {
        // Your code goes here
        makeGraph(root,-1);
        depth[target]=0;
        dfs(target);
        return ans;
    }
};
