class Solution {
  public:
  vector<int> dx={0,1,0,-1};
  vector<int> dy={1,0,-1,0};
  bool isValid(int i,int j,vector<vector<int>> &A,vector<vector<int>> &dist)
  {
      if(i<0 || j<0 || i>=A.size() || j>=dist[0].size() || 
      A[i][j]!=1 || dist[i][j]!=-1) return false;
      return true;
  }
    int shortestDistance(int N, int M, vector<vector<int>> A, int X, int Y) {
        if(A[0][0]!=1 || A[X][Y]!=1) return -1;
        vector<vector<int>> dist(N,vector<int> (M,-1));
        dist[0][0]=0;
        queue<pair<int,int>> q;
        q.push({0,0});
        while(!q.empty())
        {
            int x=q.front().first;
            int y=q.front().second;
            int d=dist[x][y];
            q.pop();
            for(int k=0;k<4;k++)
            {
                int newx=x+dx[k];
                int newy=y+dy[k];
                if(isValid(newx,newy,A,dist))
                {
                    if(newx==X && newy==Y) return 1+d;
                    dist[newx][newy]=1+d;
                    q.push({newx,newy});
                }
            }
        }
        return dist[X][Y];
    }
};
