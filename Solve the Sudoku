class Solution 
{
    public:
    bool check(int grid[N][N],int i,int j,int k)
    {
        for(int x=0;x<9;x++) if(grid[x][j]==k) return false;
        for(int y=0;y<9;y++) if(grid[i][y]==k) return false;
        int row = i - i%3, col = j - j%3;
        for(int x=0; x<3; x++)
            for(int y=0; y<3; y++)
                if(grid[row+x][col+y] == k) return false;
        return true;
    }
    //Function to find a solved Sudoku. 
    bool solve(int grid[N][N],int i,int j)
    {
        if(i==9) return true;
        if(j==9) return solve(grid,i+1,0);
        if(grid[i][j]!=0) return solve(grid,i,j+1);
        for(int k=1;k<=9;k++)
        {
            if(check(grid,i,j,k))
            {
                grid[i][j]=k;
                if(solve(grid,i,j+1)) return true;
                grid[i][j]=0;
            }
        }
        return false;
    }
    bool SolveSudoku(int grid[N][N])  
    { 
        // Your code here
        return solve(grid,0,0);
    }
    
    //Function to print grids of the Sudoku.
    void printGrid (int grid[N][N]) 
    {
        // Your code here 
        for(int i=0;i<9;i++)
        {
            for(int j=0;j<9;j++) cout<<grid[i][j]<<" ";
            //cout<<'\n';
        }
    }
};
