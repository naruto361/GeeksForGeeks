class Solution{
public:	
    void merge(vector<int> &ans,vector<int> &original,int *arr,int l,int mid,int r,int sz)
    {
        int m=mid-l+1 , n=r-(mid+1)+1;
        int left[m],right[n];
        for(int i=0;i<m;i++) left[i]=original[i+l];
        for(int j=0;j<n;j++) right[j]=original[j+mid+1];
        int i=0,j=0,k=l;
        int rightsmall=0;
        while(i<m && j<n)
        {
            if(arr[left[i]]<=arr[right[j]])
            {
                original[k]=left[i];
                ans[left[i]]+=rightsmall;
                i++;k++;
            }
            else
            {
                rightsmall++;
                original[k]=right[j];
                j++;k++;
            }
        }
        while(i<m)
        {
            original[k]=left[i];
            ans[left[i]]+=rightsmall;
            i++;k++;
        }
        while(j<n)
        {
            original[k]=right[j];
            k++;j++;
        }
    }
    void mergeSort(vector<int> &ans,vector<int> &original,int *arr,int l,int r,int sz)
    {
        if(l>=r) return ;
        int mid=l+(r-l)/2;
        mergeSort(ans,original,arr,l,mid,sz);
        mergeSort(ans,original,arr,mid+1,r,sz);
        merge(ans,original,arr,l,mid,r,sz);
    }
	vector<int> constructLowerArray(int *arr, int n) {
	    // code here
	    int sz=n;
	    vector<int> original(n);
	    for(int i=0;i<n;i++) original[i]=i;
	    vector<int> ans(n,0);
	    mergeSort(ans,original,arr,0,n-1,sz);
	    return ans;
	}
};
