class Solution
{
    public:
    vector<int> dx={0,0,1,-1};
    vector<int> dy={1,-1,0,0};
    bool valid(int i,int j,vector<vector<int>> &grid)
    {
        if(i<0 || j<0 || i>=grid.size() || j>=grid.size() || grid[i][j]==0)
            return false;
        return true;
    }
    //Function to find whether a path exists from the source to destination.
    bool solve(vector<vector<int>> &grid,int i,int j,int x,int y)
    {
        //cout<<i<<" "<<j<<'\n';
        if(i==x && j==y) return true;
        grid[i][j]=0;
        for(int k=0;k<4;k++)
        {
            int newi=i+dx[k];
            int newj=j+dy[k];
            if(valid(newi,newj,grid))
            {
                if(solve(grid,newi,newj,x,y)) return true;
            }
        }
        return false;
    }
    bool is_Possible(vector<vector<int>>& grid) 
    {
        //code here
        pair<int,int> startidx={-1,-1},endidx={-1,-1};
        int n=grid.size();
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<n;j++)
            {
                if(grid[i][j]==1) startidx={i,j};
                else if(grid[i][j]==2) endidx={i,j};
                if(startidx.first!=-1 && endidx.first!=-1)
                    break;
            }
        }
        return solve(grid,startidx.first,startidx.second,endidx.first,endidx.second);
    }
};
