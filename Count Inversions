long long merge(long long arr[],int l,int mid,int r)
{
    if(l>=r) return 0;
    long long inv=0;
    int n1=mid-l+1 , n2=r-(mid+1)+1;
    long long a[n1],b[n2];
    for(int i=0;i<n1;i++) a[i]=arr[l+i];
    for(int i=0;i<n2;i++) b[i]=arr[mid+1+i];
    int i=0,j=0,k=l;
    while(i<n1 && j<n2)
    {
        if(a[i]<=b[j])
        {
            arr[k++]=a[i++];
        }
        else
        {
            inv += n1-i;
            arr[k++]=b[j++];
        }
    }
    while(i<n1) arr[k++]=a[i++];
    while(j<n2) arr[k++]=b[j++];
    return inv;
}
long long mergeSort(long long arr[],int l,int r)
{
    long long inv=0;
    if(l<r)
    {
        int mid=l+(r-l)/2;
        inv += mergeSort(arr,l,mid);
        inv += mergeSort(arr,mid+1,r);
        inv += merge(arr,l,mid,r);
    }
    return inv;
}
long long int inversionCount(long long arr[], long long N)
{
    // Your Code Here
    return mergeSort(arr,0,N-1);
}
