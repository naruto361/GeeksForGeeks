class Solution{
public:
    // Function to determine if graph can be coloured with at most M colours such
    // that no two adjacent vertices of graph are coloured with same colour.
    bool possible(int node,vector<vector<int>> &adj,vector<int> color,int nayacolor)
    {
        for(auto &child:adj[node])
        {
            if(color[child]==nayacolor) return false;
        }
        return true;
    }
    bool solve(int node,vector<vector<int>> &adj,int n,vector<int> &color,int m)
    {
        if(node==n) return true;
        for(int i=1;i<=m;i++)
        {
            if(possible(node,adj,color,i))
            {
                color[node]=i;
                if(solve(node+1,adj,n,color,m))
                    return true;
                color[node]=0;
            }
            
        }
        return false;
    }
    bool graphColoring(bool graph[101][101], int m, int n) {
        // your code here
        vector<vector<int>> adj(n);
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<n;j++)
            {
                if(graph[i][j])
                {
                    adj[i].push_back(j);
                    adj[j].push_back(i);
                }
            }
        }
        vector<int> color(n,0);
        return solve(0,adj,n,color,m);
    }
};
