class Solution {
public:
    bool isValid(int i,int j,vector<vector<int>> &dist)
    {
        if(i<1 || j>=dist.size() || i>=dist.size() || j<1 || dist[i][j]!=-1)
            return false;
        return true;
    }
    vector<int> dx={2,2,1,1,-1,-1,-2,-2};
    vector<int> dy={1,-1,2,-2,2,-2,1,-1};
	int minStepToReachTarget(vector<int>&KnightPos, vector<int>&TargetPos, int N){
	    if(KnightPos == TargetPos) return 0;
	    queue<pair<int,int>> q;
	    q.push({KnightPos[0],KnightPos[1]});
	    vector<vector<int>> dist(N+1,vector<int> (N+1,-1));
	    dist[KnightPos[0]][KnightPos[1]]=0;
	    while(!q.empty())
	    {
	        int n=q.size();
	        while(n--)
	        {
	            int x=q.front().first;
	            int y=q.front().second;
	            q.pop();
	            for(int k=0;k<8;k++)
	            {
	                int newx=x+dx[k] , newy=y+dy[k];
	                if(isValid(newx,newy,dist))
	                {
	                    dist[newx][newy]=1+dist[x][y];
	                    if(newx==TargetPos[0] && newy==TargetPos[1])
	                        return dist[newx][newy];
	                    q.push({newx,newy});
	                }
	            }
	        }
	    }
	    return -1;
	}
};
